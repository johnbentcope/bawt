diff --git a/build/ical.js b/build/ical.js
index 6f6442f..83ff4f1 100644
--- a/build/ical.js
+++ b/build/ical.js
@@ -666,11 +666,30 @@ ICAL.design = (function() {
         }
       },
       recur: {
-        fromICAL: recurReplaceUntil.bind(this, 'fromICAL'),
-        toICAL: recurReplaceUntil.bind(this, 'toICAL'),
+        fromICAL: function(string) {
+          return ICAL.Recur.fromICAL(string);
+        },
+        toICAL: function(data) {
+          var str = "";
+          for (var k in data) {
+            var val = data[k]
+            if (typeof val == "object") {
+              // likely an array
+              val = val.join(",");
+            } else if (k == "until") {
+              if (val.length > 10) {
+                val = design.value['date-time'].toICAL(val);
+              } else {
+                val = design.value['date'].toICAL(val);
+              }
+            }
+            str += k.toUpperCase() + "=" + val + ";";
+          }
+          return str.substr(0, str.length - 1);
+        },
 
         decorate: function decorate(aValue) {
-          return ICAL.Recur.fromString(aValue);
+          return ICAL.Recur.fromData(aValue);
         },
 
         undecorate: function(aRecur) {
@@ -4168,17 +4187,17 @@ ICAL.TimezoneService = (function() {
 
     if (typeof(data) === 'object') {
       for (var key in data) {
-        this[key] = data[key];
+        if (key in partDesign) {
+          this.parts[key] = data[key];
+        } else {
+          this[key] = data[key];
+        }
       }
 
       if (this.until && !(this.until instanceof ICAL.Time)) {
-        this.until = new ICAL.Time(this.until);
+        this.until = ICAL.Time.fromString(this.until);
       }
     }
-
-    if (!this.parts) {
-      this.parts = {};
-    }
   };
 
   ICAL.Recur.prototype = {
@@ -4289,7 +4308,7 @@ ICAL.TimezoneService = (function() {
         str += ";" + k + "=" + this.parts[k];
       }
       if (this.until ){
-        str += ';UNTIL=' + this.until.toString();
+        str += ';UNTIL=' + this.until.toICALString();
       }
       if ('wkst' in this && this.wkst !== ICAL.Time.DEFAULT_WEEK_START) {
         str += ';WKST=' + ICAL.Recur.numericDayToIcalDay(this.wkst);
@@ -4382,7 +4401,11 @@ ICAL.TimezoneService = (function() {
     },
 
     UNTIL: function(value, dict) {
-      dict.until = ICAL.Time.fromString(value);
+      if (value.length > 10) {
+        dict.until = ICAL.design.value['date-time'].fromICAL(value)
+      } else {
+        dict.until = ICAL.design.value['date'].fromICAL(value)
+      }
     },
 
     WKST: function(value, dict) {
@@ -4413,8 +4436,16 @@ ICAL.TimezoneService = (function() {
   };
 
   ICAL.Recur.fromString = function(string) {
+    var dict = ICAL.Recur.fromICAL(string);
+    return new ICAL.Recur(dict);
+  };
+
+  ICAL.Recur.fromData = function(aData) {
+    return new ICAL.Recur(aData);
+  };
+
+  ICAL.Recur.fromICAL = function(string) {
     var dict = Object.create(null);
-    var dictParts = dict.parts = Object.create(null);
 
     // split is slower in FF but fast enough.
     // v8 however this is faster then manual split?
@@ -4434,13 +4465,13 @@ ICAL.TimezoneService = (function() {
         for (; partArrIdx < partArrLen; partArrIdx++) {
           partArr[partArrIdx] = partDesign[name](partArr[partArrIdx]);
         }
-        dictParts[name] = partArr;
+        dict[name] = partArr;
       } else if (name in optionDesign) {
         optionDesign[name](value, dict);
       }
     }
 
-    return new ICAL.Recur(dict);
+    return dict;
   };
 
 })();
diff --git a/lib/ical/design.js b/lib/ical/design.js
index dead538..da61f8d 100644
--- a/lib/ical/design.js
+++ b/lib/ical/design.js
@@ -388,11 +388,30 @@ ICAL.design = (function() {
         }
       },
       recur: {
-        fromICAL: recurReplaceUntil.bind(this, 'fromICAL'),
-        toICAL: recurReplaceUntil.bind(this, 'toICAL'),
+        fromICAL: function(string) {
+          return ICAL.Recur.fromICAL(string);
+        },
+        toICAL: function(data) {
+          var str = "";
+          for (var k in data) {
+            var val = data[k]
+            if (typeof val == "object") {
+              // likely an array
+              val = val.join(",");
+            } else if (k == "until") {
+              if (val.length > 10) {
+                val = design.value['date-time'].toICAL(val);
+              } else {
+                val = design.value['date'].toICAL(val);
+              }
+            }
+            str += k.toUpperCase() + "=" + val + ";";
+          }
+          return str.substr(0, str.length - 1);
+        },
 
         decorate: function decorate(aValue) {
-          return ICAL.Recur.fromString(aValue);
+          return ICAL.Recur.fromData(aValue);
         },
 
         undecorate: function(aRecur) {
diff --git a/lib/ical/recur.js b/lib/ical/recur.js
index 8ab1725..ed60c3e 100644
--- a/lib/ical/recur.js
+++ b/lib/ical/recur.js
@@ -33,17 +33,17 @@
 
     if (typeof(data) === 'object') {
       for (var key in data) {
-        this[key] = data[key];
+        if (key in partDesign) {
+          this.parts[key] = data[key];
+        } else {
+          this[key] = data[key];
+        }
       }
 
       if (this.until && !(this.until instanceof ICAL.Time)) {
-        this.until = new ICAL.Time(this.until);
+        this.until = ICAL.Time.fromString(this.until);
       }
     }
-
-    if (!this.parts) {
-      this.parts = {};
-    }
   };
 
   ICAL.Recur.prototype = {
@@ -154,7 +154,7 @@
         str += ";" + k + "=" + this.parts[k];
       }
       if (this.until ){
-        str += ';UNTIL=' + this.until.toString();
+        str += ';UNTIL=' + this.until.toICALString();
       }
       if ('wkst' in this && this.wkst !== ICAL.Time.DEFAULT_WEEK_START) {
         str += ';WKST=' + ICAL.Recur.numericDayToIcalDay(this.wkst);
@@ -247,7 +247,11 @@
     },
 
     UNTIL: function(value, dict) {
-      dict.until = ICAL.Time.fromString(value);
+      if (value.length > 10) {
+        dict.until = ICAL.design.value['date-time'].fromICAL(value)
+      } else {
+        dict.until = ICAL.design.value['date'].fromICAL(value)
+      }
     },
 
     WKST: function(value, dict) {
@@ -278,8 +282,16 @@
   };
 
   ICAL.Recur.fromString = function(string) {
+    var dict = ICAL.Recur.fromICAL(string);
+    return new ICAL.Recur(dict);
+  };
+
+  ICAL.Recur.fromData = function(aData) {
+    return new ICAL.Recur(aData);
+  };
+
+  ICAL.Recur.fromICAL = function(string) {
     var dict = Object.create(null);
-    var dictParts = dict.parts = Object.create(null);
 
     // split is slower in FF but fast enough.
     // v8 however this is faster then manual split?
@@ -299,13 +311,13 @@
         for (; partArrIdx < partArrLen; partArrIdx++) {
           partArr[partArrIdx] = partDesign[name](partArr[partArrIdx]);
         }
-        dictParts[name] = partArr;
+        dict[name] = partArr;
       } else if (name in optionDesign) {
         optionDesign[name](value, dict);
       }
     }
 
-    return new ICAL.Recur(dict);
+    return dict;
   };
 
 })();

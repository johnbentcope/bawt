/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 * Portions Copyright (C) Philipp Kewisch, 2012-2014 */

ICAL.debug = true;

function MonthWidget(widget) {
  widget.events = [];

  function parseData() {
    var data = widget.querySelector(".data");
    if (data.value.length) {
      try {
          // First load the source representation
          var res = ICAL.parse(data.value);
          var comp = new ICAL.Component(res);

          var vevents  = comp.getAllSubcomponents("vevent");
          var parents = {};
          for (var i = 0; i < vevents.length; i++) {
            var event = new ICAL.Event(vevents[i]);

            if (event.isRecurrenceException()) {
              if (event.uid in parents) {
                parents[event.uid].relateException(event);
                vevents.splice(i, 1);
              } else {
                // Add it to the end, we'll parse it later
                vevents.push(vevents.splice(i, 1));
              }
              i--;
            } else {
              vevents[i] = parents[event.uid] = event;
            }
          }

          widget.events = vevents;
          widget.querySelector(".error").textContent = "";
      } catch (e) {
          widget.querySelector(".error").textContent = stringError(e);
      }
    }

    return false;
  }

  function gotoDate(dt) {
    function addDayBox(event, currentDate, currentEnd) {
        var isZero = (currentDate.compare(currentEnd) == 0);
        do {
          var box = getBoxForDate(currentDate);
          if (box) {
            var eventbox = setupEvent(event, currentDate);
            box.appendChild(eventbox);
          }
          currentDate.day++
        } while (currentDate.compare(currentEnd) <= 0 && !isZero);
    }

    var months = ["January", "February", "March", "April", "May", "June",
                  "July", "August", "September", "October", "November",
                  "December"];

    var monthName = widget.querySelector(".monthName");
    var month = widget.querySelector(".monthGrid");

    monthName.textContent = months[dt.month - 1] + " " + dt.year;

    month.monthDate = dt.clone();
    month.firstDate = dt.startOfMonth().startOfWeek();
    month.lastDate = dt.endOfMonth().endOfWeek();

    var currentDate = month.firstDate.clone();
    var weeks = month.querySelectorAll("tr");
    clearBoxes();

    var currentDayIndex = 0;
    var currentWeekIndex = 1;
    var currentWeek = weeks[currentWeekIndex];
    var currentDays = currentWeek.querySelectorAll("td");
    while (currentDate.compare(month.lastDate) <= 0) {
      var currentBox = currentDays[currentDayIndex];
      if (!currentBox) {
          if (currentWeekIndex + 2 > weeks.length) {
              month.appendChild(weeks[2].cloneNode(true));
              weeks = month.querySelectorAll("tr");
          }

          currentWeekIndex++;
          currentDayIndex = 0;
          currentWeek = weeks[currentWeekIndex];
          currentDays = currentWeek.querySelectorAll("td");
          currentBox = currentDays[currentDayIndex];
      }
      currentBox.querySelector("p").textContent = currentDate.day;
      currentBox.classList.toggle("othermonth", currentDate.month != month.monthDate.month);

      currentDate.day++;
      currentDayIndex++;
    }

    while (currentWeekIndex + 2 <= weeks.length) {
      month.removeChild(month.lastChild);
      weeks = month.querySelectorAll("tr");
    }

    for (var i = 0; i < widget.events.length; i++) {
      var event = widget.events[i];
      if (event.isRecurring()) {
        var iter = event.iterator(event.startDate);
        var currentDate = iter.next();
        console.log(currentDate.toString());
        while (currentDate && currentDate.compare(month.firstDate) < 0) {
          currentDate = iter.next();
        }
        while (currentDate && currentDate.compare(month.lastDate) <= 0) {
          var currentEnd = currentDate.clone();
          currentEnd.addDuration(event.duration);
          addDayBox(event, currentDate.clone(), currentEnd);
          currentDate = iter.next();
        }
      } else {
        addDayBox(event, event.startDate, event.endDate);
      }
    }
  }

  // --- Helper functions start here ---
  function advanceMonth(delta) {
    var month = widget.querySelector(".monthGrid");
    var newDate = month.monthDate.clone();
    newDate.month += delta;

    gotoDate(newDate);
  }

  function goToday() {
    gotoDate(ICAL.Time.now());
  }

  function setupEvent(event, occ) {
    var node = widget.querySelector(".eventbox").cloneNode(true);
    node.removeAttribute("style");
    var sumNode = node.querySelector(".summary");
    sumNode.textContent = event.summary;
    return node;
  }

  function getBoxForDate(aDate) {
    var month = widget.querySelector(".monthGrid");
    var boxes = month.querySelectorAll("td");
    var firstDOY = month.firstDate.dayOfYear();
    var diffDays = aDate.dayOfYear() - firstDOY;
    return boxes.length >= diffDays ? boxes[diffDays] : null;
  }

  function clearBoxes() {
    var month = widget.querySelector(".monthGrid");
    var events = month.querySelectorAll(".eventbox");

    for (var i = 0; i < events.length; i++) {
        events[i].parentNode.removeChild(events[i]);
    }
  }

  function stringError(e) {
    return "Error: " + e +
           ("fileName" in e ? "\nFilename: " + e.fileName : "") +
           ("lineNumber" in e ? "\nLine: " + e.lineNumber : "") +
           ("stack" in e ? "\nStack: " + e.stack : "");
  }


  // --- set up the module ---
  widget.advanceMonth = advanceMonth;
  widget.goToday = goToday;
  widget.parseData = parseData;
  widget.events = [];

  parseData();
  goToday();
  return widget;
}

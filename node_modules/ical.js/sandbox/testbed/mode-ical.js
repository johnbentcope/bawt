ace.define("ace/mode/ical", ['require', 'ace/lib/oop', 'ace/mode/text', 'ace/tokenizer'], function(require, exports, module) {
    "use strict";

    var oop = require("../lib/oop");
    var TextMode = require("./text").Mode;
    var Tokenizer = require("../tokenizer").Tokenizer;
    var IcalHighlightRules = require("./ical_highlight_rules").IcalHighlightRules;

    var IcalFoldMode = require("./folding/ical").FoldMode;

    var IcalMode = function() {
        // set everything up
        var highlighter = new IcalHighlightRules();
        this.foldingRules = new IcalFoldMode();

        this.$tokenizer = new Tokenizer(highlighter.getRules());
    };
    oop.inherits(IcalMode, TextMode);

    exports.Mode = IcalMode;
});

ace.define("ace/mode/ical_highlight_rules", ['require', 'ace/lib/oop', 'ace/mode/text_highlight_rules'], function (require, exports, module) {
    var oop = require("../lib/oop");
    var TextHighlightRules = require("./text_highlight_rules").TextHighlightRules;

    var IcalHighlightRules = function() {
        var icalname = /[A-Za-z0-9\-]+/;
        var icalsafechar = /[^\x00-\x08\x0A-\x1F\x7F";:,]+/;
        this.$rules = {
            "start": [
                { regex: / /, token: "text", next: "value" },
                { regex: icalname, token: "keyword", next: "paramOrValue" }
            ],
            "paramOrValue": [
                { regex: /:/, token: "text", next: "value" },
                { regex: /;/, token: "text", next: "paramName" },
            ],
            "value": [
                { regex: ".+", token: "text" },
                { regex: " ", merge: true },
                { regex: /$/, token: "empty", next: "start" }
            ],
            "paramName": [
                { regex: icalname, token: "variable", next: "paramequals" }
            ],
            "paramequals": [
                { regex: /=/, token: "text", next: "paramvalue" }
            ],
            "paramvalue": [
                { regex: icalsafechar, token: "string" },
                { regex: /;/, token: "text", next: "paramName" },
                { regex: /:/, token: "text", next: "value" }
            ],

        };
    };

    oop.inherits(IcalHighlightRules, TextHighlightRules);
    exports.IcalHighlightRules = IcalHighlightRules;
});

ace.define('ace/mode/folding/ical', ['require', 'ace/lib/oop', 'ace/editor/range', 'ace/mode/folding/fold_mode'], function(require, exports, module) {
    var oop = require("../../lib/oop");
    var Range = require("../../range").Range;
    var BaseFoldMode = require("./fold_mode").FoldMode;

    var FoldMode = exports.FoldMode = function() {
        this.foldingStartMarker = /^BEGIN:(.*)$/;
        this.foldingStopMarker = /^END:(.*)$/;
        this.getFoldWidgetRange = function(session, foldStyle, row) {
            var line = session.getLine(row);
            var match = line.match(this.foldingStartMarker);
            var maxRow = session.getLength();
            var startColumn = line.length;
            var startRow = row;
            var endRow = row;
            var comp = match[1];
            var levels = 0;

            while (++row < maxRow) {
                line = session.getLine(row);
                var startmatch = line.match(this.foldingStartMarker)
                if (startmatch && startmatch[1] == comp) {
                    levels++;
                    continue;
                }
                var endmatch = line.match(this.foldingStopMarker);
                if (endmatch && endmatch[1] == comp) {
                    levels--;
                    if (levels < 0) {
                        endRow = row;
                        break;
                    }
                }
            }

            if (endRow > startRow) {
                var endColumn = session.getLine(endRow).length;
                var range = new Range(startRow, startColumn, endRow, endColumn);
                return range;
            }
        };
    };
    oop.inherits(FoldMode, BaseFoldMode);
});
